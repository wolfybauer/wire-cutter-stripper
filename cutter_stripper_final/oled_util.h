/*
// 0.96" I2C SSD1306 OLED UTILITY by wolfy
// --> vars, states, includes, defines, bitmaps, functions
// --> TODO: rewrite as a class??
*/

// library dependencies
#include <Wire.h>               // arduino I2C library
#include <Adafruit_GFX.h>       // adafruit graphics main lib
#include <Adafruit_SSD1306.h>   // hardware-specific

// screen-related defines (mostly for init)
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define SCREEN_ADDRESS 0x3C     // alt: 0x3D

// build screen instance
Adafruit_SSD1306 screen(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire);

// width+height defines for bitmaps
#define WIRE_BMP_W    128
#define WIRE_BMP_H    8
#define CURSOR_W      8
#define CURSOR_H      8
#define WOLF_W        32
#define WOLF_H        32

// enums for the states
// --> TODO: add states for RUNNING
enum MACHINE { MAIN, CUT, RUNNING };
enum MAINMENU { L, M, R };
enum CUTMENU { RUN, BACK };

// default states
// --> TODO: add default state for RUNNING
uint8_t machine_state = MAIN;
uint8_t main_state = L;
bool    cut_state  = BACK;

// default wire length values, in millimeters
// RANGE: L 1-30, M 10-240, R 1-30 (NOTE: M values increment by 10)
uint8_t L_val = 10;
uint8_t M_val = 50;
uint8_t R_val = 10;

// var N_val = number of wires to be cut. default:1
uint8_t N_val = 1;

// (128x8) BMP for middle of wire selected (M)
static const unsigned char PROGMEM MIDDLE_BMP[] =
{ B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B10000000, B00000000, B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000, B00000001,
  B10000000, B00000000, B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000, B00000001,
  B10000000, B00000000, B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000, B00000001,
  B10000000, B00000000, B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000, B00000001,
  B10000000, B00000000, B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000, B00000001,
  B10000000, B00000000, B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000, B00000001,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111 };

// (128x8) BMP for left side of wire selected (L)
static const unsigned char PROGMEM LEFT_BMP[] =
{ B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B00000000, B00000000, B00000000, B00000001,
  B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B00000000, B00000000, B00000000, B00000001,
  B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B00000000, B00000000, B00000000, B00000001,
  B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B00000000, B00000000, B00000000, B00000001,
  B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B00000000, B00000000, B00000000, B00000001,
  B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B00000000, B00000000, B00000000, B00000001,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111 };

// (128x8) BMP for right side of wire selected (R)
static const unsigned char PROGMEM RIGHT_BMP[] =
{ B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B10000000, B00000000, B00000000, B00000000, B10000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B11111111, B11111111, B11111111, B11111111,
  B10000000, B00000000, B00000000, B00000000, B10000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B11111111, B11111111, B11111111, B11111111,
  B10000000, B00000000, B00000000, B00000000, B10000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B11111111, B11111111, B11111111, B11111111,
  B10000000, B00000000, B00000000, B00000000, B10000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B11111111, B11111111, B11111111, B11111111,
  B10000000, B00000000, B00000000, B00000000, B10000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B11111111, B11111111, B11111111, B11111111,
  B10000000, B00000000, B00000000, B00000000, B10000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111 };

// (16x16) BMP for cursor
static const unsigned char PROGMEM CURSOR_BMP[] =
{ B11000000,
  B00110000,
  B00001100,
  B00000011,
  B00000011,
  B00001100,
  B00110000,
  B11000000 };

// (32 by 32) BMP for wolf logo
// --> TODO: clean up?? make it a little less ugly?
static const unsigned char PROGMEM WOLF_BMP[] =
{ B00110000, B00000000, B00000000, B01100000,
  B00101100, B00000000, B00000001, B10100000,
  B00100011, B00000000, B00000110, B00100000,
  B00100000, B11000000, B00001000, B00100000,
  B00100000, B00101111, B11101000, B00100000,
  B00100000, B00010000, B00010000, B00100000,
  B00010000, B00000000, B00000000, B00111000,
  B00011000, B00000000, B00000000, B00000100,
  B00001000, B00100010, B00000000, B00000010,
  B00001000, B00010100, B00010001, B00111111,
  B00010000, B00001000, B00001010, B00010000,
  B00100000, B00010100, B00000100, B00001000,
  B01100000, B00100010, B00001010, B00000100,
  B00011000, B00000000, B00010001, B00111110,
  B00000100, B00000000, B00000000, B00100000,
  B00001000, B00000000, B00000000, B00100000,
  B00010000, B00000000, B00000000, B00100000,
  B00100000, B00000000, B00000000, B00100000,
  B01111100, B00000000, B00000000, B00010000,
  B00000011, B10000000, B00000000, B00010000,
  B00000100, B01100000, B00000000, B00010000,
  B00000100, B00010000, B00000000, B00001000,
  B00001000, B00101000, B00000000, B00001000,
  B00001000, B01000110, B00000000, B00001100,
  B00001000, B01000001, B00000000, B00000100,
  B00001000, B01000000, B10000000, B00000010,
  B00001000, B01000000, B01100000, B00000111,
  B00000100, B00100000, B00010000, B00001111,
  B00000100, B00100000, B00001100, B00011111,
  B00000010, B00100000, B00000011, B10111110,
  B00000001, B11000000, B00000000, B01111100,
  B00000000, B00000000, B00000000, B00011000 };

// draw main menu, fairly self-explanatory.
void drawMainMenu() {

  screen.clearDisplay(); // clear buffer

  screen.setTextSize(2);
  screen.setTextColor(WHITE); // 0=BLACK 1=WHITE
    
  screen.setCursor(10, 12);             
  screen.print(F("L: "));
  screen.println(L_val);
  screen.setCursor(100, 12);             
  screen.print("mm");
    
  screen.setCursor(10, 30);             
  screen.print(F("M: "));
  screen.println(M_val);
  screen.setCursor(100, 30);             
  screen.print("mm");
    
  screen.setCursor(10, 48);            
  screen.print(F("R: "));
  screen.println(R_val);
  screen.setCursor(100, 48);             
  screen.print("mm");

  // checks MAIN MENU state, which is being fucked with by mainButtonStuff()
  // over in the main loop. updates screen accordingly.
  switch(main_state) {
      case L :
          screen.drawBitmap(0, 0, LEFT_BMP, WIRE_BMP_W, WIRE_BMP_H, 1);
          screen.drawBitmap(0, 14, CURSOR_BMP, CURSOR_W, CURSOR_H, 1);
          break;
      case M :
          screen.drawBitmap(0, 0, MIDDLE_BMP, WIRE_BMP_W, WIRE_BMP_H, 1);
          screen.drawBitmap(0, 32, CURSOR_BMP, CURSOR_W, CURSOR_H, 1);
          break;
      case R :
          screen.drawBitmap(0, 0, RIGHT_BMP, WIRE_BMP_W, WIRE_BMP_H, 1);
          screen.drawBitmap(0, 50, CURSOR_BMP, CURSOR_W, CURSOR_H, 1);
          break;
  }

  screen.display(); // display buffer on screen
}

// draw CUT MENU. also fairly self-explanatory. (+see pictures)
void drawCutMenu() {

  screen.clearDisplay(); // clear buffer

  screen.setTextSize(1);             
  screen.setTextColor(WHITE);
    
  screen.setCursor(0, 0);             
  screen.print(F("L:"));
  screen.println(L_val);
    
  screen.setCursor(50, 0);             
  screen.print(F("M:"));
  screen.println(M_val);
  
  screen.setCursor(100, 0);            
  screen.print(F("R:"));
  screen.println(R_val);

  screen.setTextSize(2);
  screen.setCursor(46, 20);
  screen.print(F("#:"));
  screen.println(N_val);

  screen.setCursor(10, 48);
  screen.print(F("RUN"));

  screen.setCursor(80, 48);
  screen.print(F("BACK"));

  // updates cut_state, as per cutButtonStuff() over in the main loop
  switch(cut_state) {
    case RUN :
      screen.drawBitmap(0, 50, CURSOR_BMP, CURSOR_W, CURSOR_H, 1);
      break;
    case BACK :
      screen.drawBitmap(70, 50, CURSOR_BMP, CURSOR_W, CURSOR_H, 1);
      break;
  }

  screen.display(); // display buffer on screen
}
